services:
  # Local services are available on their ports, but also available on:
  # http://api.localhost.tiangolo.com: backend
  # http://dashboard.localhost.tiangolo.com: frontend
  # etc. To enable it, update .env, set:
  # DOMAIN=localhost.tiangolo.com
  proxy:
    image: traefik:3.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "9090:8080"
    # Duplicate the command from docker-compose.yml to add --api.insecure=true
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      # Dummy https-redirect middleware that doesn't really redirect, only to
      # allow running it locally
      - traefik.http.middlewares.https-redirect.contenttype.autodetect=false
    networks:
      - traefik-public
      - default

  db:
    restart: "no"
    ports:
      - "5432:5432"

  adminer:
    restart: "no"
    ports:
      - "8080:8080"

  backend:
    restart: "no"
    ports:
      - "8001:8000"
    build:
      context: ./backend
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    command:
      - fastapi
      - run
      - --host
      - 0.0.0.0
      - --reload
      - "app/main.py"
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    # TODO: remove once coverage is done locally
    volumes:
      - ./backend/htmlcov:/app/htmlcov
    environment:
      SMTP_HOST: "mailcatcher"
      SMTP_PORT: "1025"
      SMTP_TLS: "false"
      EMAILS_FROM_EMAIL: "noreply@example.com"
      # Ensure backend receives model/PSI envs during local dev
      MODEL: ${MODEL}
      CREWAI_MODEL: ${CREWAI_MODEL}
      OLLAMA_HOST: ${OLLAMA_HOST}
      PSI_API_KEY: ${PSI_API_KEY}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
      PSI_CACHE_TTL_SECONDS: ${PSI_CACHE_TTL_SECONDS}
      SCAN_MAX_CONCURRENCY: ${SCAN_MAX_CONCURRENCY}
      SCAN_JOB_TTL_SECONDS: ${SCAN_JOB_TTL_SECONDS}
      CREW_AI_ENABLED: ${CREW_AI_ENABLED}
      LLM_TIMEOUT_SECONDS: ${LLM_TIMEOUT_SECONDS}
      # Keyphrases
      KEYPHRASES_ENABLED: ${KEYPHRASES_ENABLED}
      KEYPHRASES_TOP_N: ${KEYPHRASES_TOP_N}
      KEYPHRASES_TEXT_LIMIT: ${KEYPHRASES_TEXT_LIMIT}
      KEYPHRASES_TIMEOUT_MS: ${KEYPHRASES_TIMEOUT_MS}
      KEYPHRASES_CACHE_TTL_SECONDS: ${KEYPHRASES_CACHE_TTL_SECONDS}
      # Override for Docker mode - use redis service name
      REDIS_URL: redis://redis:6379/0

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"

  frontend:
    restart: "no"
    ports:
      - "5173:80"
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://localhost:8001
        - NODE_ENV=development

  # Local Vite dev server running in Node 20 for stability on Windows
  frontend-dev:
    image: node:20-alpine
    working_dir: /workspace/frontend
    command: sh -lc "npm ci && npm run dev -- --host 0.0.0.0 --port 5174"
    ports:
      - "5174:5174"
    volumes:
      - ./frontend:/workspace/frontend:cached
    environment:
      # Ensure Vite picks the backend at host-mapped port 8001 via proxy
      - NODE_ENV=development
      - VITE_IN_DOCKER=1
    depends_on:
      - backend

  # RQ Background Worker for async scan jobs
  worker:
    build:
      context: ./backend
    command: python -m app.worker
    restart: "no"
    depends_on:
      - redis
      - db
    env_file:
      - .env
    environment:
      # Required fields
      PROJECT_NAME: ${PROJECT_NAME}
      FIRST_SUPERUSER: ${FIRST_SUPERUSER}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      # Override .env values for Docker mode
      POSTGRES_SERVER: db
      POSTGRES_PORT: "5432"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_URL: redis://redis:6379/0
      MODEL: ${MODEL}
      CREWAI_MODEL: ${CREWAI_MODEL}
      OLLAMA_HOST: ${OLLAMA_HOST}
      PSI_API_KEY: ${PSI_API_KEY}
      CREW_AI_ENABLED: ${CREW_AI_ENABLED}
      LLM_TIMEOUT_SECONDS: ${LLM_TIMEOUT_SECONDS}
      KEYPHRASES_ENABLED: ${KEYPHRASES_ENABLED}
      KEYPHRASES_TOP_N: ${KEYPHRASES_TOP_N}
      KEYPHRASES_TIMEOUT_MS: ${KEYPHRASES_TIMEOUT_MS}
    volumes:
      # Don't mount ./backend:/app here - it overwrites the container's .venv
      # Worker doesn't need hot-reload anyway
      # Share ML model cache with backend
      - backend-ml-cache:/root/.cache

  playwright:
    build:
      context: ./frontend
      dockerfile: Dockerfile.playwright
      args:
        - VITE_API_URL=http://backend:8000
        - NODE_ENV=production
    ipc: host
    depends_on:
      - backend
      - mailcatcher
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://backend:8000
      - MAILCATCHER_HOST=http://mailcatcher:1080
      # For the reports when run locally
      - PLAYWRIGHT_HTML_HOST=0.0.0.0
      - CI=${CI}
    volumes:
      - ./frontend/blob-report:/app/blob-report
      - ./frontend/test-results:/app/test-results
    ports:
      - 9323:9323

volumes:
  backend-ml-cache:

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
